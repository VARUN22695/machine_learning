# -*- coding: utf-8 -*-
"""SVM_KERNAL_IMPLEMENTATION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TB9QbATq_93e45_9olPtnxZjc7T32hRu
"""

2+8

import numpy as np
import matplotlib.pyplot as plt
x=np.linspace(-5.0,5.0,100)
y=np.sqrt(10**2- x**2)
y=np.hstack([y,-y])
x=np.hstack([x,-x])

x

y

plt.scatter(x,y)

x1=np.linspace(-5.0,5.0,100)
y1=np.sqrt(6**2- x1**2)
y1=np.hstack([y1,-y1])
x2=np.hstack([x1,-x1])

plt.scatter(x,y)
plt.scatter(x1,y1)

x1

y1

import numpy as np
import matplotlib.pyplot as plt

# Create some data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Create figure and axes
fig, ax = plt.subplots()

# Plot the data
ax.plot(x, y)

# Customize the plot (if needed)
ax.set_title('Sine Wave')
ax.set_xlabel('X-axis')
ax.set_ylabel('Y-axis')

# Show the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
x=np.linspace(-5.0,5.0,100)
y=np.sqrt(10**2- x**2)
y=np.hstack([y,-y])
x=np.hstack([x,-x])
fig,ax= plt.subplots()
ax.plot(x,y)
plt.show()

!pip install plotly

import plotly.graph_objects as go

# Example: Creating a basic scatter plot
x=[2,3,4,6,7,8]
y=[1,4,3,-1,4,8]
fig = go.Scatter(x, y)

# Optional: Add titles and labels
fig.update_layout(title='My Plotly Scatter Plot', xaxis_title='X-axis', yaxis_title='Y-axis')

# Show the plot
fig.show()

import numpy as np
import math
import matplotlib.pyplot as plt

# Define the function
def f(x):
    return np.sqrt(9-x**2) , -np.sqrt(9-x**2)
# Generate x values
x_values = np.linspace(-10, 10, 400)

# Calculate corresponding y values
y_values = f(x_values)

# Plot the equation
plt.plot(x_values, y_values, label='Plot of 9 = x^2 +y^2')

# Add labels and title
plt.xlabel('x')
plt.ylabel('y')
plt.title('Plot of 9 = x^2 +y^2')
plt.legend()

# Display the plot
plt.grid(True)
plt.show()

math.sqrt(16)

import numpy as np
import matplotlib.pyplot as plt

# Example data
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Plot the data
plt.plot(x, y)

# Set x-axis and y-axis limits to include all data points
plt.xlim(min(x), max(x))
plt.ylim(min(y), max(y))

# Add labels and title
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Full Axis Plot')

# Display the plot
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Generate angles from 0 to 2*pi (360 degrees)
angles = np.linspace(0, 2*np.pi, 100)

# Calculate x and y coordinates of points on the circumference of the circle
x = np.cos(angles)
y = np.sin(angles)

# Plot the circle
plt.plot(x, y)

# Set equal aspect ratio to ensure the circle is not distorted
plt.axis('equal')

# Add labels and title
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.title('Full Circle Plot')

# Display the plot
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt
x=np.linspace(-5,5,100)
y=np.sqrt(100-x**2)
x=np.hstack([x,-x])
y=np.hstack([y,-y])
x1=np.linspace(-5,5,100)
y1=np.sqrt(25-x1**2)
x1=np.hstack([x1,-x1])
y1=np.hstack([y1,-y1])
print(plt.scatter(x,y))
plt.scatter(-x1,-y1)

import pandas as pd
df1=pd.DataFrame(np.vstack([x,y]).T, columns=[["X1","X2"]])
df1["y"]=0
df2=pd.DataFrame(np.vstack([x1,y1]).T, columns=[["X1","X2"]])
df2["y"]=1
df=df1.append(df2)

df.head()

np.vstack([x,y])



np.vstack([x,y]).T

import plotly.express as px

fig=px.scatter_3d(df,x=df["X1"]**2,y= df["X2"]**2,z=df["X1"]*df["X2"])

df[X1]

df

df["X1"]

df["X1"]**2

df

x=df.iloc[:,:2]
Y=df.y

x

Y

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC

x_train,x_test,Y_train, Y_test = train_test_split(x,Y,test_size=0.25,random_state=0)

classifier= SVC(kernel='linear')
classifier.fit(x_train, Y_train)

y_pred= classifier.predict(x_test)

accuracy=accuracy_score(y_pred,Y_test)

accuracy

df

df["X"]=df["X1"]*df["X1"]



df

df["Y"]=df["X2"]*df["X2"]
df["Z"]= df["X1"]*df['X2'].values



df

df

df["X"]=df["X1"]*df["X1"]

df["Y"]=df["X2"]*df["X2"]
df["Z"]= df["X1"]*df['X2'].values

df

import plotly.express as px



fig=px.scatter_3d(df,A='X',B='Y',C='Z')

df

##INDEPENDENT_FEATURE
A=df.iloc[:,3:]

A

#DEPENDENT FEATURE
B=df["y"]

B

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC

A_train,A_test,B_train, B_test = train_test_split(A,B,test_size=0.25,random_state=0)

model = SVC(kernel="linear")
model.fit(A_train,B_train)

B_pred= model.predict(A_test)

accuracy_score(B_pred,B_test)

import plotly.graph_objects as go


# Create trace
trace = go.Scatter3d(
    X="X",
    Y="Y",
    Z="Z",
    mode='markers',
    marker=dict(
        size=12,
        color="z",                # set color to an array/list of desired values
        colorscale='Viridis',   # choose a colorscale
        opacity=0.8
    )
)

# Create layout
layout = go.Layout(
    scene=dict(
        xaxis=dict(title='X axis'),
        yaxis=dict(title='Y axis'),
        zaxis=dict(title='Z axis')
    )
)

# Combine trace and layout into a figure
fig = go.Figure(data=[trace], layout=layout)

# Display the figure
fig.show()

from plotly.express import px

import plotly.express as px

fig=px.scatter_3d(df,x="X",y="Y",z="Z", color="Y")
fig.show()

from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='viridis')

df

fig=px.scatter_3d(df,x="X1",y="X2",z="y", color="Y")
fig.show()

import plotly.express as px
import pandas as pd

# Sample DataFrame with three features
data = {
    'feature1': [1, 2, 3, 4, 5],
    'feature2': [2, 3, 4, 5, 6],
    'feature3': [3, 4, 5, 6, 7]
}
df = pd.DataFrame(data)

# Create 3D scatter plot using Plotly Express
fig = px.scatter_3d(df, x='feature1', y='feature2', z='feature3', color='feature3', size_max=18)

# Update layout
fig.update_layout(scene=dict(
                    xaxis_title='Feature 1',
                    yaxis_title='Feature 2',
                    zaxis_title='Feature 3'
                    ))

# Show plot
fig.show()

df

df

df["Y"]=df["X2"]*df["X2"]
df["Z"]= df["X1"]*df['X2'].values

df

df1=df.iloc[:,3:]

df1

df1

fig=px.scatter_3d(df1,x='X',y='Y',z='Z')
fig.show()



import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import pandas as pd



# Create a 3D scatter plot using Matplotlib
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df1['X'], df1['Y'], df1['Z'])

# Set labels and title
ax.set_xlabel('Feature 1')
ax.set_ylabel('Feature 2')
ax.set_zlabel('Feature 3')
ax.set_title('3D Scatter Plot')

plt.show()

a=[1,2,3,4,5,6]
a.remove(2)

a

a=[1,2,3,4,5,6]
for i in a:
  a.remove(i)
print(a)

a = [1, 2, 3, 4, 5, 6]
for i in a.copy():  # Use a.copy() to create a copy of the list
    a.remove(i)
print(a)